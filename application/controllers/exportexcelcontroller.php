<?phpclass exportExcelController extends controller {            function breadcrumbs($separator = ' Â» ', $home = 'Home') {$path = array_filter(explode('/', parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH)));$base_url = substr($_SERVER['SERVER_PROTOCOL'], 0, strpos($_SERVER['SERVER_PROTOCOL'], '/')) . '://' . $_SERVER['HTTP_HOST'] . '/';$breadcrumbs = array("<a href=.DS.$base_url.DS.>$home</a>");$tmp = array_keys($path);$last = end($tmp);unset($tmp);foreach ($path as $x => $crumb) {$title = ucwords(str_replace(array('.php', '_'), array('', ' '), $crumb));if ($x == 1){$breadcrumbs[] = "<a href=.DS.$base_url$crumb.DS.>$title</a>";}elseif ($x > 1 && $x < $last){$tmp = " for($i = 1; $i <= $x; $i++){ $tmp .= $path[$i] . '/'; } $tmp .= .DS.>$title";$breadcrumbs[] = $tmp;unset($tmp);}else{$breadcrumbs[] = "$title";}}return implode($separator, $breadcrumbs);}    function overallsummaryAction(){      $this->_template->addHeaderScript('userprofile.js');         $networkModel = new networkModel();        $this->set("networks", $networkModel->getNetworkList());      $this->set("network_s", '');      $this->set("report_date_from", '');      $this->set("report_date_to", '');                  if(isset($_POST['submitevidencedata'])){                      $network=$_REQUEST['network'];           $report_date_from=$_REQUEST['report_date_from'];           $report_date_to=$_REQUEST['report_date_to'];                      $this->set("network_s", $network);           $this->set("report_date_from", $report_date_from);           $this->set("report_date_to", $report_date_to);                      if(empty($_POST['network'])){            $data['error_msg']="Please select Organisation";               }else if(!empty($report_date_from) && empty($report_date_to)){             $data['error_msg']="Please select dates properly";              }else if(empty($report_date_from) && !empty($report_date_to)){             $data['error_msg']="Please select dates properly";              }                         if(isset($data['error_msg'])){             //$this->_render = false;                 $this->set("error",$data['error_msg']);               }else{                                              $exportExcelModel =new exportExcelModel();               $data_show=$exportExcelModel->getSummaryData($network,$report_date_from,$report_date_to);               if(count($data_show)>0){                $this->_render = false;                   $report=$this->downloadSummaryReoprtDataAction($data_show,$network,$report_date_from,$report_date_to);                 }else{                $data['error_msg']="No Records Found";                  }             }                          if(isset($data['error_msg'])){             //$this->_render = false;                 $this->set("error",$data['error_msg']);               }                  }                             }        function downloadSummaryReoprtDataAction($data_show,$network,$report_date_from,$report_date_to){      $networkname=$data_show[0]['network_name'];      $exportExcelModel =new exportExcelModel();      //print_r($data_show);      $objPHPExcel = new PHPExcel();      header('Content-Type: application/vnd.ms-excel');                header('Content-Disposition: attachment;filename="'.$networkname.'_summaryreport.xlsx"');                header('Cache-Control: max-age=0');      $objPHPExcel->getProperties()                  ->setCreator("PHPOffice")                  ->setLastModifiedBy("PHPOffice")                  ->setTitle("PHPExcel Test Document")                  ->setSubject("PHPExcel Test Document")                  ->setDescription("Test document for PHPExcel, generated using PHP classes.")                  ->setKeywords("Office PHPExcel php")                  ->setCategory("Test result file");     $objPHPExcel->setActiveSheetIndex(0);     $objPHPExcel->getActiveSheet()->setTitle("Overall Summary Report");          $objPHPExcel->setActiveSheetIndex(0)->SetCellValue("A1", 'Summary Report for '.$networkname.'');     $objPHPExcel->getActiveSheet()->getStyle("A1:A1")->getFont()->setBold(true);     $objPHPExcel->getActiveSheet()->getStyle("A1:A1")->getFont()->setSize(15);     $objPHPExcel->getActiveSheet()->mergeCells('A1:J1');             $style = array(        'alignment' => array(            'horizontal' => PHPExcel_Style_Alignment::HORIZONTAL_CENTER,        )    );          $objPHPExcel->setActiveSheetIndex(0)->SetCellValue("E2", 'Round-1');     $objPHPExcel->getActiveSheet()->getStyle("E2:G2")->getFont()->setBold(true);     $objPHPExcel->getActiveSheet()->getStyle("E2:G2")->getFont()->setSize(10);     $objPHPExcel->getActiveSheet()->mergeCells('E2:G2');           $objPHPExcel->getActiveSheet()->getStyle("E2:G2")->applyFromArray($style);          $objPHPExcel->setActiveSheetIndex(0)->SetCellValue("H2", 'Round-2');     $objPHPExcel->getActiveSheet()->getStyle("H2:J2")->getFont()->setBold(true);     $objPHPExcel->getActiveSheet()->getStyle("H2:J2")->getFont()->setSize(10);     $objPHPExcel->getActiveSheet()->mergeCells('H2:J2');      $objPHPExcel->getActiveSheet()->getStyle("H2:J2")->applyFromArray($style);          $row=3;     $objPHPExcel->setActiveSheetIndex(0)->SetCellValue("A".$row."", "S.No");     $objPHPExcel->setActiveSheetIndex(0)->SetCellValue("B".$row."", "Organisation");     $objPHPExcel->setActiveSheetIndex(0)->SetCellValue("C".$row."", "Centre");     $objPHPExcel->setActiveSheetIndex(0)->SetCellValue("D".$row."", "Batch");     $objPHPExcel->setActiveSheetIndex(0)->SetCellValue("E".$row."", "Total");     $objPHPExcel->setActiveSheetIndex(0)->SetCellValue("F".$row."", "Completed");     $objPHPExcel->setActiveSheetIndex(0)->SetCellValue("G".$row."", "Not Completed");          $objPHPExcel->setActiveSheetIndex(0)->SetCellValue("H".$row."", "Total");     $objPHPExcel->setActiveSheetIndex(0)->SetCellValue("I".$row."", "Completed");     $objPHPExcel->setActiveSheetIndex(0)->SetCellValue("J".$row."", "Not Completed");          $objPHPExcel->getActiveSheet()->getStyle("A".$row.":J".$row."")->getFont()->setBold(true);     $objPHPExcel->getActiveSheet()->getStyle("A".$row.":J".$row."")->getFont()->setSize(9);          $row++;     $i=1;     $rowstart=$row;     $tot_r1=0;     $tot_cr1=0;     $tot_icr1=0;     $tot_r2=0;     $tot_cr2=0;     $tot_icr2=0;     $centres=array();     foreach($data_show as $key=>$val){              $objPHPExcel->setActiveSheetIndex(0)->SetCellValue("A".$row."", "".$i."");     $objPHPExcel->setActiveSheetIndex(0)->SetCellValue("B".$row."", "".$val['network_name']."");     $objPHPExcel->setActiveSheetIndex(0)->SetCellValue("C".$row."", "".$val['province_name']."");     $objPHPExcel->setActiveSheetIndex(0)->SetCellValue("D".$row."", "".$val['client_name']."");          $tot_r1=$tot_r1+$val['Round1_Total'];     $tot_cr1=$tot_cr1+$val['Round1_completed'];     $tot_icr1=$tot_icr1+$val['Round1_incompleted'];     $tot_r2=$tot_r2+$val['Round2_Total'];     $tot_cr2=$tot_cr2+$val['Round2_completed'];     $tot_icr2=$tot_icr2+$val['Round2_incompleted'];     $centres[]=$val['province_name'];          if($val['Round1_Total']==0 && $val['Round1_completed']==0 && $val['Round1_incompleted']==0){         $val['Round1_Total']="";         $val['Round1_completed']="";         $val['Round1_incompleted']="";     }          if($val['Round2_Total']==0 && $val['Round2_completed']==0 && $val['Round2_incompleted']==0){         $val['Round2_Total']="";         $val['Round2_completed']="";         $val['Round2_incompleted']="";     }          $objPHPExcel->setActiveSheetIndex(0)->SetCellValue("E".$row."", "".$val['Round1_Total']."");     $objPHPExcel->setActiveSheetIndex(0)->SetCellValue("F".$row."", "".$val['Round1_completed']."");     $objPHPExcel->setActiveSheetIndex(0)->SetCellValue("G".$row."", "".$val['Round1_incompleted']."");          $objPHPExcel->setActiveSheetIndex(0)->SetCellValue("H".$row."", "".$val['Round2_Total']."");     $objPHPExcel->setActiveSheetIndex(0)->SetCellValue("I".$row."", "".$val['Round2_completed']."");     $objPHPExcel->setActiveSheetIndex(0)->SetCellValue("J".$row."", "".$val['Round2_incompleted']."");     $i++;     $row++;     }     $rowend=$row-1;     $centres=array_unique($centres);     //$objPHPExcel->getActiveSheet()->setCellValue("E".$row."",12);          $objPHPExcel->setActiveSheetIndex(0)->SetCellValue("A".$row."", 'Total');     $objPHPExcel->getActiveSheet()->getStyle("A".$row.":D".$row."")->getFont()->setBold(true);     $objPHPExcel->getActiveSheet()->getStyle("A".$row.":D".$row."")->getFont()->setSize(10);     $objPHPExcel->getActiveSheet()->mergeCells("A".$row.":D".$row."");           $objPHPExcel->getActiveSheet()->getStyle("A".$row.":D".$row."")->applyFromArray($style);          /*$objPHPExcel->getActiveSheet()->setCellValue("E".$row."","=SUM(E".$rowstart.":E".$rowend.")");     $objPHPExcel->getActiveSheet()->setCellValue("F".$row."",'=SUM(F'.$rowstart.':F'.$rowend.')');     $objPHPExcel->getActiveSheet()->setCellValue("G".$row."",'=SUM(G'.$rowstart.':G'.$rowend.')');          $objPHPExcel->getActiveSheet()->setCellValue("H".$row."",'=SUM(H'.$rowstart.':H'.$rowend.')');     $objPHPExcel->getActiveSheet()->setCellValue("I".$row."",'=SUM(I'.$rowstart.':I'.$rowend.')');     $objPHPExcel->getActiveSheet()->setCellValue("J".$row."",'=SUM(J'.$rowstart.':J'.$rowend.')');            */          $objPHPExcel->getActiveSheet()->setCellValue("E".$row."",$tot_r1);     $objPHPExcel->getActiveSheet()->setCellValue("F".$row."",$tot_cr1);     $objPHPExcel->getActiveSheet()->setCellValue("G".$row."",$tot_icr1);          $objPHPExcel->getActiveSheet()->setCellValue("H".$row."",$tot_r2);     $objPHPExcel->getActiveSheet()->setCellValue("I".$row."",$tot_cr2);     $objPHPExcel->getActiveSheet()->setCellValue("J".$row."",$tot_icr2);           $BStyle = array(                'borders' => array(                'allborders' => array(                'style' => PHPExcel_Style_Border::BORDER_THIN                )                )                );          $objPHPExcel->getActiveSheet()->getStyle('A2:J'.($row).'')->applyFromArray($BStyle);          $row++;     $row++;     $objPHPExcel->getActiveSheet()->setCellValue("B".$row."","Total Batches");     $objPHPExcel->getActiveSheet()->setCellValue("C".$row."",($i-1));     $objPHPExcel->getActiveSheet()->getStyle('B'.($row).':C'.($row).'')->applyFromArray($BStyle);     $row++;     $objPHPExcel->getActiveSheet()->setCellValue("B".$row."","Total Centres");     $objPHPExcel->getActiveSheet()->setCellValue("C".$row."",count($centres));         $objPHPExcel->getActiveSheet()->getStyle('B'.($row).':C'.($row).'')->applyFromArray($BStyle);                    $newSheet = $objPHPExcel->createSheet();    $objPHPExcel->setActiveSheetIndex(1);    $newSheet->setTitle("Students");        $row_2_1=2;                $objPHPExcel->setActiveSheetIndex(1)->SetCellValue("A1","All Students - ".$networkname."");                $objPHPExcel->getActiveSheet(1)->mergeCells('A1:J1');                $objPHPExcel->getActiveSheet()->getStyle("A1:A1")->getFont()->setBold(true);                $objPHPExcel->getActiveSheet()->getStyle("A1:A1")->getFont()->setSize(15);                    $objPHPExcel->setActiveSheetIndex(1)->SetCellValue("A".$row_2_1."","S.No.");    $objPHPExcel->setActiveSheetIndex(1)->SetCellValue("B".$row_2_1."","Organisation");    $objPHPExcel->setActiveSheetIndex(1)->SetCellValue("C".$row_2_1."","Centre");    $objPHPExcel->setActiveSheetIndex(1)->SetCellValue("D".$row_2_1."","Batch");    $objPHPExcel->setActiveSheetIndex(1)->SetCellValue("E".$row_2_1."","Name");    $objPHPExcel->setActiveSheetIndex(1)->SetCellValue("F".$row_2_1."","Round-1 Status");    //$objPHPExcel->setActiveSheetIndex(1)->SetCellValue("G".$row_2_1."","Round-1 Award");    $objPHPExcel->setActiveSheetIndex(1)->SetCellValue("G".$row_2_1."","Round-2 Status");    //$objPHPExcel->setActiveSheetIndex(1)->SetCellValue("I".$row_2_1."","Round-2 Award");    $students=$exportExcelModel->getSummaryStudentData($network,$report_date_from,$report_date_to);        //print_r($students);    //die();    $row_2_1++;    $start=1;    foreach($students as $student){    $student['r1_status']=$student['r1_status']==1?"Completed":"Not Completed";    $student['r2_status']=$student['r2_status']==1?"Completed":"Not Completed";        $objPHPExcel->setActiveSheetIndex(1)->SetCellValue("A".$row_2_1."",$start);    $objPHPExcel->setActiveSheetIndex(1)->SetCellValue("B".$row_2_1."","".$student['network_name']."");    $objPHPExcel->setActiveSheetIndex(1)->SetCellValue("C".$row_2_1."","".$student['province_name']."");    $objPHPExcel->setActiveSheetIndex(1)->SetCellValue("D".$row_2_1."","".$student['client_name']."");    $objPHPExcel->setActiveSheetIndex(1)->SetCellValue("E".$row_2_1."","".$student['student_name']."");    $objPHPExcel->setActiveSheetIndex(1)->SetCellValue("F".$row_2_1."","".$student['r1_status']."");    //$objPHPExcel->setActiveSheetIndex(1)->SetCellValue("G".$row_2_1."","Round-1 Award");    $objPHPExcel->setActiveSheetIndex(1)->SetCellValue("G".$row_2_1."","".$student['r2_status']."");    //$objPHPExcel->setActiveSheetIndex(1)->SetCellValue("I".$row_2_1."","Round-2 Award");         $start++;     $row_2_1++;    }         $objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel2007');              //$objWriter->save('tmp/temp_upload/'.$school.'_round'.$round.'.xlsx');     $objWriter->save('php://output');         }    function studentDataAction(){                    ini_set('memory_limit', '-1');            $resourceModel = new resourceModel();            $networkModel = new networkModel();            $resourceModel = new resourceModel();            $assessmentModel=new assessmentModel();            $diagnosticModel=new diagnosticModel();                        $list = array();            $list = $resourceModel->getResourceParentDirectoryList();                        $this->set("networks", $networkModel->getNetworkList());            $this->set("provinces", $networkModel->getProvinceList());            $this->set("provinces", $resourceModel->getResourceParentDirectoryList());            $this->set("aqsRounds",$assessmentModel->getRounds());                        $this->_template->addHeaderStyle('bootstrap-multiselect.css');            $this->_template->addHeaderScript('bootstrap-multiselect.js');            $this->_template->addHeaderScript('evidencedata.js');            if(isset($_POST['submitevidencedata']) || isset($_GET['group_assessment_id'])){                        if(isset($_POST['submitevidencedata']) && empty($_POST['network'])){            $data['error_msg']="Please select Organisation";                }            else if(isset($_POST['submitevidencedata']) && empty($_POST['province'])){            $data['error_msg']="Please select Centre";                }else if(empty($_REQUEST['school'])){            $data['error_msg']="Please select Batch";                }else if(empty($_REQUEST['round'])){            $data['error_msg']="Please select Round";                }else{                         $batch=$_REQUEST['school'];             $round=$_REQUEST['round'];             $groupdata=$assessmentModel->getGAIdfromClientandRound($batch,$round);             //print_r($groupdata);             $gaid=$groupdata['group_assessment_id'];             if($gaid>0){             $assessment=$diagnosticModel->getTeacherAssessmentReports($gaid);              // print_r($assessment['diagnostic_ids']);	     foreach($assessment['diagnostic_ids'] as $key=>$val){                 $diagnostic_id=$key;             }	                         $report=$this->downloadStudentDataAction($gaid,8,$diagnostic_id,'','');             if($report){                              }             $this->_render = false;             }else{             $this->_render = false;                 $data['error_msg']="There is no student Assessment";                  }            }                          if(isset($data['error_msg'])){             $this->_render = false;                 $this->set("error",$data['error_msg']);               }                         }    }  function downloadStudentDataAction($group_assessment_id,$report_id,$diagnostic_id,$conductedDate,$validDate){        error_reporting(1);       if ((in_array(6, $this->user['role_ids']) || in_array(5, $this->user['role_ids'])) && $this->user['has_view_video'] != 1 && $this->user['is_web'] == 1)//principal and school admin have to view video for self-review            $this->_notPermitted = 1;        elseif (!in_array("create_assessment", $this->user['capabilities'])) {            $this->_notPermitted = 1;        }                ini_set("memory_limit", "20000M");        ini_set('max_execution_time', 1200);                $reportObject=new groupReport($group_assessment_id,$report_id,$diagnostic_id,$conductedDate,$validDate);        $reportObject->generateExcelOutput();        return true;        $this->_render = false;          }    function getAllTeachersStudentsAction($gaid) {					if(empty($gaid))				$this->apiResult ["message"] = "ID Cannot be empty.\n";				else {					$resourceModel = new resourceModel ();				        $gaid = $gaid;                                        //print_r($school_ids);die;					//echo $network_id;                                        if(in_array("manage_all_users",$this->user['capabilities'])){                                        $user_list = $resourceModel->getTeachersStudentUsers('','',$gaid);                                            }else{                                        $user_list = $resourceModel->getTeachersStudentUsers('','',$gaid,$this->user['user_id']);                                        }                                                                                return count($user_list) >= 1?$user_list:array();                                                                                  									}}          function evidenceDataAction(){                       ini_set('memory_limit', '-1');            $resourceModel = new resourceModel();            $networkModel = new networkModel();            $resourceModel = new resourceModel();            $assessmentModel = new assessmentModel();            $list = array();            $list = $resourceModel->getResourceParentDirectoryList();                        $this->set("networks", $networkModel->getNetworkList());            $this->set("assessmentTypes", $assessmentModel->getAllAssessmentTypes());            $this->set("provinces", $networkModel->getProvinceList());            $this->set("provinces", $resourceModel->getResourceParentDirectoryList());                        $this->set("aqsRounds",$assessmentModel->getRounds());                                                $isPop=(isset($_REQUEST['isPop']) && $_REQUEST['isPop']==1)?$_REQUEST['isPop']:'';            $gaid=isset($_REQUEST['gaid'])?$_REQUEST['gaid']:0;            $this->set("isPop",$isPop);            $this->set("gaid",$gaid);                                                $student_teacher=$this->getAllTeachersStudentsAction($gaid);                        $group_assessment_details=$assessmentModel->getAssessmentsInGroupAssessment($gaid);                        $this->set("student_teacher",$student_teacher);            $this->set("group_assessment_details",$group_assessment_details);                        $this->_template->addHeaderStyle('bootstrap-multiselect.css');            $this->_template->addHeaderScript('bootstrap-multiselect.js');                       if($gaid==0){            $this->_template->addHeaderScript('evidencedata.js');            }                        if(isset($_POST['submitevidencedata'])){                  //echo "<pre>"; print_r($_POST);die;                if(empty($_POST['assessment_type'])) {                    $this->set("error","Assessment type should not be empty");                 }else {                    $data=$this->downloadEvidenceDataExcelAction();                                        if(isset($data['error_msg'])){                       $this->set("error",$data['error_msg']);                      }                }            }              }          function allDataAction() {        if ((in_array(6, $this->user['role_ids']) || in_array(5, $this->user['role_ids'])) && $this->user['has_view_video'] != 1 && $this->user['is_web'] == 1)//principal and school admin have to view video for self-review            $this->_notPermitted = 1;        elseif (!in_array("create_assessment", $this->user['capabilities'])) {            $this->_notPermitted = 1;        }    }    function downloadAllDataExcelAction() {        if ((in_array(6, $this->user['role_ids']) || in_array(5, $this->user['role_ids'])) && $this->user['has_view_video'] != 1 && $this->user['is_web'] == 1)//principal and school admin have to view video for self-review            $this->_notPermitted = 1;        elseif (!in_array("create_assessment", $this->user['capabilities'])) {            $this->_notPermitted = 1;            return;        }        //error_reporting(0);        ini_set("memory_limit", "20000M");        ini_set('max_execution_time', 1200);        $diagnosticModel = new diagnosticModel();        $kpas = $diagnosticModel->getKpasForDiagnostic(1);        $exportExcelModel = new exportExcelModel();        $assessments = $exportExcelModel->getAllData();        $objPHPExcel = new PHPExcel();        $workSheetArr = array(            $objPHPExcel->createSheet(),            $objPHPExcel->createSheet(),            $objPHPExcel->createSheet(),            $objPHPExcel->createSheet(),            $objPHPExcel->createSheet(),            $objPHPExcel->createSheet(),            $objPHPExcel->createSheet()        );        $kpaData = array();        for ($i = 0; $i < 6; $i++) {            $workSheetArr[$i]->fromArray(array(array("Sr No", "School Name", "KPA{$i}SSREKQ1", "KPA{$i}SEREKQ1", "KPA{$i}JDKQ1", "KPA{$i}SSRE1", "KPA{$i}SERE1", "KPA{$i}JD1", "KPA{$i}SSRE1A", "KPA{$i}SERE1A", "KPA{$i}JD1A", "KPA{$i}SSRE1B", "KPA{$i}SERE1B", "KPA{$i}JD1B", "KPA{$i}SSRE1C", "KPA{$i}SERE1C", "KPA{$i}JD1C", "KPA{$i}SSRE2", "KPA{$i}SERE2", "KPA{$i}JD2", "KPA{$i}SSRE2A", "KPA{$i}SERE2A", "KPA{$i}JD2A", "KPA{$i}SSRE2B", "KPA{$i}SERE2B", "KPA{$i}JD2B", "KPA{$i}SSRE2C", "KPA{$i}SERE2C", "KPA{$i}JD2C", "KPA{$i}SSRE3", "KPA{$i}SERE3", "KPA{$i}JD3", "KPA{$i}SSRE3A", "KPA{$i}SERE3A", "KPA{$i}JD3A", "KPA{$i}SSRE3B", "KPA{$i}SERE3B", "KPA{$i}JD3B", "KPA{$i}SSRE3C", "KPA{$i}SERE3C", "KPA{$i}JD3C", "KPA{$i}SSREKQ2", "KPA{$i}SEREKQ2", "KPA{$i}JDKQ2", "KPA{$i}SSRE4", "KPA{$i}SERE4", "KPA{$i}JD4", "KPA{$i}SSRE4A", "KPA{$i}SERE4A", "KPA{$i}JD4A", "KPA{$i}SSRE4B", "KPA{$i}SERE4B", "KPA{$i}JD4B", "KPA{$i}SSRE4C", "KPA{$i}SERE4C", "KPA{$i}JD4C", "KPA{$i}SSRE5", "KPA{$i}SERE5", "KPA{$i}JD5", "KPA{$i}SSRE5A", "KPA{$i}SERE5A", "KPA{$i}JD5A", "KPA{$i}SSRE5B", "KPA{$i}SERE5B", "KPA{$i}JD5B", "KPA{$i}SSRE5C", "KPA{$i}SERE5C", "KPA{$i}JD5C", "KPA{$i}SSRE6", "KPA{$i}SERE6", "KPA{$i}JD6", "KPA{$i}SSRE6A", "KPA{$i}SERE6A", "KPA{$i}JD6A", "KPA{$i}SSRE6B", "KPA{$i}SERE6B", "KPA{$i}JD6B", "KPA{$i}SSRE6C", "KPA{$i}SERE6C", "KPA{$i}JD6C", "KPA{$i}SSREKQ3", "KPA{$i}SEREKQ3", "KPA{$i}JDKQ3", "KPA{$i}SSRE7", "KPA{$i}SERE7", "KPA{$i}JD7", "KPA{$i}SSRE7A", "KPA{$i}SERE7A", "KPA{$i}JD7A", "KPA{$i}SSRE7B", "KPA{$i}SERE7B", "KPA{$i}JD7B", "KPA{$i}SSRE7C", "KPA{$i}SERE7C", "KPA{$i}JD7C", "KPA{$i}SSRE8", "KPA{$i}SERE8", "KPA{$i}JD8", "KPA{$i}SSRE8A", "KPA{$i}SERE8A", "KPA{$i}JD8A", "KPA{$i}SSRE8B", "KPA{$i}SERE8B", "KPA{$i}JD8B", "KPA{$i}SSRE8C", "KPA{$i}SERE8C", "KPA{$i}JD8C", "KPA{$i}SSRE9", "KPA{$i}SERE9", "KPA{$i}JD9", "KPA{$i}SSRE9A", "KPA{$i}SERE9A", "KPA{$i}JD9A", "KPA{$i}SSRE9B", "KPA{$i}SERE9B", "KPA{$i}JD9B", "KPA{$i}SSRE9C", "KPA{$i}SERE9C", "KPA{$i}JD9C")), NULL, "A1", true)->setTitle($kpas[$i]['kpa_name'])->getStyle('A1:DO1')->getFont()->setBold(true);            $dataArray = array();            foreach ($assessments as $aid => $a) {                if (empty($kpaData[$aid]))                    $kpaData[$aid] = array();                if (isset($a['external']['kpa_scores'][$i])) {                    $havInternal = isset($a['internal']['kpa_scores'][$i]) && count($a['internal']['js_scores']) > 26 ? true : false;                    if ($havInternal) {                        $kpaData[$aid][] = $a['internal']['kpa_scores'][$i];                        $kpaData[$aid][] = $a['external']['kpa_scores'][$i];                        $kpaData[$aid][] = $a['internal']['kpa_scores'][$i] - $a['external']['kpa_scores'][$i];                    } else {                        $kpaData[$aid][] = "";                        $kpaData[$aid][] = $a['external']['kpa_scores'][$i];                        $kpaData[$aid][] = "";                    }                    $row = array();                    $row[] = $a['client_id'];                    $row[] = $a['client_name'];                    for ($j = 0; $j < 3; $j++) {                        if ($havInternal) {                            $row[] = $a['internal']['kq_scores'][$i][$j];                            $row[] = $a['external']['kq_scores'][$i][$j];                            $row[] = $a['internal']['kq_scores'][$i][$j] - $a['external']['kq_scores'][$i][$j];                        } else {                            $row[] = "";                            $row[] = $a['external']['kq_scores'][$i][$j];                            $row[] = "";                        }                        for ($k = 0; $k < 3; $k++) {                            $cq_index = $i * 3 + $j;                            if ($havInternal) {                                $row[] = $a['internal']['cq_scores'][$cq_index][$k];                                $row[] = $a['external']['cq_scores'][$cq_index][$k];                                $row[] = $a['internal']['cq_scores'][$cq_index][$k] - $a['external']['cq_scores'][$cq_index][$k];                            } else {                                $row[] = "";                                $row[] = $a['external']['cq_scores'][$cq_index][$k];                                $row[] = "";                            }                            for ($l = 0; $l < 3; $l++) {                                $js_index = $cq_index * 3 + $k;                                if ($havInternal) {                                    $row[] = $a['internal']['js_scores'][$js_index][$l];                                    $row[] = $a['external']['js_scores'][$js_index][$l];                                    $row[] = $a['internal']['js_scores'][$js_index][$l] - $a['external']['js_scores'][$js_index][$l];                                } else {                                    $row[] = "";                                    $row[] = $a['external']['js_scores'][$js_index][$l];                                    $row[] = "";                                }                            }                        }                    }                    $dataArray[] = $row;                }            }            $workSheetArr[$i]->fromArray($dataArray, NULL, 'A2', TRUE);        }        $workSheetArr[6]->fromArray(array(array('Sr No', 'School code', 'School Name', 'Principal Name', 'AQS Date (day 5 date)', 'SVSU', 'ASIST', 'Network Name', 'networks/standalone', 'Urban/Rural', 'Govt/Aided/Private', 'school fee', 'medium of instruction', 'No. of students', 'no. of boys', 'no. of girls', 'section_pre-primary', 'section_primary', 'section_middle', 'section_secondary', 'section_high-school', 'award level', 'award tier', 'award level+tier', 'medium of instrcution', 'boys/girls/CO-ed', 'state board', 'ICSE board', 'cbse board', 'ib board', 'igcse board', 'other_board', 'boarding_yes_no', 'playground', 'TAP', 'research visit', 'any NGO intervention', 'NGO_name1', 'NGO_name2', 'NGO_name3', 'PPP_Yes_no', 'RTE Compliance', 'school recognition no.', 'school recognition authority', 'school mission_yes_no', 'school_vision_yes_no', 'KPA1SSRE', 'KPA1SERE', 'KPA1JD', 'KPA2SSRE', 'KPA2SERE', 'KPA2JD', 'KPA3SSRE', 'KPA3SERE', 'KPA3JD', 'KPA4SSRE', 'KPA4SERE', 'KPA4JD', 'KPA5SSRE', 'KPA5SERE', 'KPA5JD', 'KPA6SSRE', 'KPA6SERE', 'KPA6JD')), NULL, 'A1', true)->setTitle("overall")->getStyle('A1:BL1')->getFont()->setBold(true);        $rId = 1;        $alphaArr = array(1 => "A", 2 => "B", 3 => "C", 4 => "D", 5 => "E");        foreach ($assessments as $k => $a) {            $rId++;            $workSheetArr[6]->setCellValue("A$rId", $k)->setCellValue("C$rId", $a['client_name'])->setCellValue("D$rId", $a['principal_name'])->setCellValue("H$rId", $a['network_name'])->setCellValue("K$rId", $a['school_type'])->setCellValue("L$rId", $a['annual_fee'])->setCellValue("N$rId", $a['no_of_students'])->fromArray(array($kpaData[$k]), NULL, "AU$rId", true);            if ($a['board_id'] > 0 && $a['board_id'] < 6) {                $workSheetArr[6]->setCellValue("A" . $alphaArr[$a['board_id']] . $rId, 1);            }        }        $objPHPExcel->removeSheetByIndex(0);        $objPHPExcel->setActiveSheetIndex(0);        $this->_render = false;        header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');        header('Content-Disposition: attachment;filename="kpa_report.xlsx"');        header('Cache-Control: max-age=0');        // If you're serving to IE 9, then the following may be needed        header('Cache-Control: max-age=1');        // If you're serving to IE over SSL, then the following may be needed        header('Expires: Mon, 26 Jul 1997 05:00:00 GMT'); // Date in the past        header('Last-Modified: ' . gmdate('D, d M Y H:i:s') . ' GMT'); // always modified        header('Cache-Control: cache, must-revalidate'); // HTTP/1.1        header('Pragma: public'); // HTTP/1.0        $objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel2007');        $objWriter->save('php://output');        exit;    }        function downloadEvidenceDataExcelAction() {            //ini_set("memory_limit", "20000M");        ini_set('max_execution_time', 1200000);        $exportExcelModel = new exportExcelModel();          //$client_info = $exportExcelModel->getDistinctClient();        $school_related_to=$_POST['school_related_to'];        $network=isset($_POST['network'])?$_POST['network']:array();        $assessment_type=isset($_POST['assessment_type'])?$_POST['assessment_type']:'';        $province=isset($_POST['province'])?$_POST['province']:array();        $school=isset($_POST['school'])?$_POST['school']:array();                $teacher_student=isset($_POST['teacher_student'])?$_POST['teacher_student']:array();        $report_view=isset($_POST['report_view'])?$_POST['report_view']:'';        $round_form=isset($_POST['round'])?$_POST['round']:'';        $gaid=isset($_POST['gaid'])?$_POST['gaid']:0;                //$special_symbols = array("#","[","]","/","\\",",","(",")");        $special_symbols = array("#","[","]","/","\\",",","(",")","&","$","*","{","}"," ");                $client_info = $exportExcelModel->getDistinctClientSearch($school_related_to,$network,$province,$school,$assessment_type,$teacher_student,$gaid,$round_form);		        $client_id=  explode(",", $client_info['client_id']);        $clients_name=  explode(";", $client_info['client_name']);        /*echo '<pre>';        print_r($client_id);        print_r($clients_name);        echo"</pre>";        die();*/                $count_client=$client_info['client_count'];                 //echo '<pre>';        $error=array();        //echo $count_client;        if($count_client==0){            $error['error_msg']="No Records Found under search criteria!";            //$this->_redirect(createUrl(array("controller"=>"exportExcel","action"=>"evidenceData")));        //die();        }                if(count($error)>0){            return $error;        }       	$tmpPath = ROOT."tmp".DS."tmp_evidence".DS;        /*echo '<pre>';        echo $tmpPath;        die;*/        $i=0;         $zip = new ZipArchive();         $zip_path="tmp/tmp_evidence/Evidence_Report.zip";          //$zip->open("Evidence_Report.zip",  ZipArchive::OVERWRITE);    if ($zip->open($zip_path, ZIPARCHIVE::CREATE | ZIPARCHIVE::OVERWRITE) !== TRUE) {    die ("An error occurred creating your ZIP file.");  }        while($i<$count_client){                    $objPHPExcel = new PHPExcel();                             if($assessment_type==1 || $assessment_type==5 || $report_view!="2"){                     	            $workSheetArr = $objPHPExcel->createSheet();                    if($assessment_type==2 || $assessment_type==4){                    $teacher_student_label=$assessment_type == 2?"Teacher Name":"Student Name";                        $workSheetArr->setCellValue('A1','Network Name')                     ->setCellValue('B1','Province Name')                     ->setCellValue('C1','School Name')                                                   ->setCellValue('D1',$teacher_student_label)                                                 ->setCellValue('E1','Round')                                                       ->setCellValue('F1','KPA Name')                     ->setCellValue('G1','Key Question Text')                     ->setCellValue('H1','Core Question text')				 			     ->setCellValue('I1','Judgement Statement Text')		     ->setCellValue('J1','Internal Evidence Text')		     ->setCellValue('K1','External Evidence Text')		     ->setCellValue('L1','Internal file Names');                                        }else{                                                $workSheetArr->setCellValue('A1','Network Name')                     ->setCellValue('B1','Province Name')                     ->setCellValue('C1','School Name')                                                                         ->setCellValue('D1','Round')                                                       ->setCellValue('E1','KPA Name')                     ->setCellValue('F1','Key Question Text')                     ->setCellValue('G1','Core Question text')				 			     ->setCellValue('H1','Judgement Statement Text')		     ->setCellValue('I1','Internal Evidence Text')		     ->setCellValue('J1','External Evidence Text')		     ->setCellValue('K1','Internal file Names');                    }                    	        $objPHPExcel->getActiveSheet()->getStyle('A1:Z1')->getFont()->setBold(true); // Making header of a sheet bold  			          //$invalidCharacters = $workSheetArr->getInvalidCharacters();                  //echo $title = str_replace($invalidCharacters, '', $clients_name[$i]);                $workSheetArr->setTitle(substr($clients_name[$i],0,30));                $objPHPExcel->removeSheetByIndex(0);                $objPHPExcel->setActiveSheetIndex(0);                                    }                 		$evidences = $exportExcelModel->getFileDetails($client_id[$i],$_POST['assessment_type'],$teacher_student,$round_form,$gaid);                                                if(($assessment_type==2 || $assessment_type==4) && $report_view=="2"){                $evidences=$this->db->array_grouping($evidences,"user_id");                }                                //echo"<pre>";                //print_r($evidences);                //echo"</pre>";                //die();	         $rId = 1;               $max_internal_files=0;        $file_internal=array();        $file_external=array();        $client_name = $clients_name[$i];          if(($assessment_type==2 || $assessment_type==4) && $report_view=="2" ){                    $totsheet=0;                    foreach($evidences as $keystu=>$valstu){                    if($totsheet==0){                    $workSheetArr = $objPHPExcel->getActiveSheet();                       }else{                        $workSheetArr = $objPHPExcel->createSheet($totsheet);                    }                                        if($assessment_type==2 || $assessment_type==4){                    $teacher_student_label=$assessment_type == 2?"Teacher Name":"Student Name";                        $workSheetArr->setCellValue('A1','Network Name')                     ->setCellValue('B1','Province Name')                     ->setCellValue('C1','School Name')                                                   ->setCellValue('D1',$teacher_student_label)                                                 ->setCellValue('E1','Round')                                                       ->setCellValue('F1','KPA Name')                     ->setCellValue('G1','Key Question Text')                     ->setCellValue('H1','Core Question text')				 			     ->setCellValue('I1','Judgement Statement Text')		     ->setCellValue('J1','Internal Evidence Text')		     ->setCellValue('K1','External Evidence Text')		     ->setCellValue('L1','Internal file Names');                                        }else{                                             $workSheetArr->setCellValue('A1','Network Name')                     ->setCellValue('B1','Province Name')                     ->setCellValue('C1','School Name')                                                                         ->setCellValue('D1','Round')                                                       ->setCellValue('E1','KPA Name')                     ->setCellValue('F1','Key Question Text')                     ->setCellValue('G1','Core Question text')				 			     ->setCellValue('H1','Judgement Statement Text')		     ->setCellValue('I1','Internal Evidence Text')		     ->setCellValue('J1','External Evidence Text')		     ->setCellValue('K1','Internal file Names');                    }                    	        $workSheetArr->getStyle('A1:Z1')->getFont()->setBold(true); // Making header of a sheet bold  			          //$invalidCharacters = $workSheetArr->getInvalidCharacters();                  //echo $title = str_replace($invalidCharacters, '', $clients_name[$i]);                                                                             $ii=0;                      $rId=1;                     $max_internal_files=0;                    $file_internal=array();                    $file_external=array();                  foreach ($valstu as $key => $value) {                                           if($ii==0){                   $workSheetArr->setTitle(substr($value['name'],0,30));                   //$objPHPExcel->removeSheetByIndex($totsheet);                   //$objPHPExcel->setActiveSheetIndex($totsheet);                   }                   $evidences[$key] = array();                   $file_int=  explode("#T@t@#", $value['file_int']);		   $file_ext=  explode("#T@t@#", $value['file_ext']);                   $file1_cnt=count($file_int);                   $file2_cnt=count($file_ext);                   $final_files_cnt=$file1_cnt+$file2_cnt;                                      if($assessment_type==2 || $assessment_type==4){                   $round=!empty($value['student_round'])?$value['student_round']:'';                       }else{                   $round=!empty($value['aqs_round'])?$value['aqs_round']:'';                   }                   //echo '<pre>';                    //echo $final_files_cnt;                    //die;                    //echo '<pre>';		   $file_internal=  explode("#T@t@#", $value['file_int']);		   $file_external=  explode("#T@t@#", $value['file_ext']);                   $file_names=array_merge($file_internal, $file_external);                                      $file_total=count($file_names);                $srcfile = ROOT."uploads".DS;			 		$client_name = $value['client_name'];                                if($assessment_type==2 || $assessment_type==4){                $teacher_student_name=$value['name'];                }else{                $teacher_student_name="";                   }                $kpa = "KPA" . $value['kpa_order'];                $kq = "_KQ" . $value['kq_order'];                $cq = "_CQ" . $value['cq_order'];                $js = "_JS" . $value['js_order'];                $dstfile_path = $kpa . $kq . $cq . $js;                                if($teacher_student_name!=""){                $tname="$teacher_student_name".DS."";                }else{                $tname="";                   }                $dstfile1 = $tmpPath."$client_name".DS."".$tname."$dstfile_path".DS;                //                echo count($file_names);                                /*for($j=0;$j<$file_total;$j++){                                            //echo $file_names[$j][$k]."<br>";                     if(!file_exists($dstfile1) && file_exists($srcfile.$file_names[$j]) && !empty($file_names[$j]) ){                           mkdir($dstfile1,0777,true);                     }                                          if(file_exists($srcfile.$file_names[$j]) && !empty($file_names[$j]) ){                                                  //$special_symbols = array("#","[","]","/","\\");                         $final_file = str_replace($special_symbols, "", $file_names[$j]);                                               @copy($srcfile.$file_names[$j], $dstfile1.$final_file);                        $zip->addFile($dstfile1.$file_names[$j],"$client_name".DS."".$tname."$dstfile_path".DS."$final_file");  // Adding files into zip                        //echo $srcfile.$file_names[$j];                     }                        }*/                                       // die;                           //$rId=1;            $rId++;            if($assessment_type==2 || $assessment_type==4){             $col1=11;              $workSheetArr->setCellValue("A$rId",$value['network_name'])                         ->setCellValue("B$rId",$value['province_name'])                         ->setCellValue("C$rId",$client_name)                         ->setCellValue("D$rId",$value['name'])                         ->setCellValue("E$rId",$round)                         ->setCellValue("F$rId",$value['kpa_name'])                         ->setCellValue("G$rId",$value['key_question_text'])                         ->setCellValue("H$rId",$value['core_question_text'])                         ->setCellValue("I$rId",$value['judgement_statement_text'])                         ->setCellValue("J$rId",$value['internal_evidence'])                         ->setCellValue("K$rId",$value['external_evidence']);            }else{                $col1=10;            $workSheetArr->setCellValue("A$rId",$value['network_name'])                         ->setCellValue("B$rId",$value['province_name'])                         ->setCellValue("C$rId",$client_name)                         ->setCellValue("D$rId",$round)                         ->setCellValue("E$rId",$value['kpa_name'])                         ->setCellValue("F$rId",$value['key_question_text'])                         ->setCellValue("G$rId",$value['core_question_text'])                         ->setCellValue("H$rId",$value['judgement_statement_text'])                         ->setCellValue("I$rId",$value['internal_evidence'])                         ->setCellValue("J$rId",$value['external_evidence']);            }			$max_internal_files =$max_internal_files>$file1_cnt?$max_internal_files:$file1_cnt;                        $col2=$max_internal_files+$col1;                    			if($file1_cnt>0){                      for($kl=0;$kl<$file1_cnt;$kl++)                     {                        //$special_symbols = array("#","[","]","/","\\");                        $final_file_internal = str_replace($special_symbols, "", $file_internal[$kl]);  			$workSheetArr->setCellValueByColumnAndRow($col1,$rId,$final_file_internal);                        //echo "".$dstfile1."".$file_internal[$kl]."";                                                if(detailsFile("uploads/".$final_file_internal."") ){                            $file_internal[$kl]!=''?$workSheetArr->getCellByColumnAndRow($col1,$rId)->getHyperlink()->setUrl("".UPLOAD_URL.$final_file_internal):'';                              }                                                //$objPHPExcel->getActiveSheet()->setCellValueByColumnAndRow($max_internal_files,$rId,$file_external[$kl]);                        //$objPHPExcel->getActiveSheet()->getCellByColumnAndRow($max_internal_files,$rId)->getHyperlink()->setUrl("$dstfile_path".DS.$file_external[$kl]);                           $col1++;                        //$max_internal_files++;                        //$col2++;                                          }                        }                        if($file2_cnt>0){                                          //$col2++;                      for($l=0;$l<$file2_cnt;$l++)                     {                                                //$special_symbols = array("#","[","]","/","\\");                        $final_file_external = str_replace($special_symbols, "", $file_external[$l]);   			$workSheetArr->setCellValueByColumnAndRow($col2,$rId,$final_file_external);                                                                        if(detailsFile("uploads/".$final_file_external."") ){                            $file_external[$l]!=''?$workSheetArr->getCellByColumnAndRow($col2,$rId)->getHyperlink()->setUrl("".UPLOAD_URL.$final_file_external):'';                        }                                                $col2++;                     }                     			}$ii++;                          }                                   $totsheet++;                          if($assessment_type==2 || $assessment_type==4){         $workSheetArr->setCellValueByColumnAndRow(11+$max_internal_files,1,'External File Names');             }else{         $workSheetArr->setCellValueByColumnAndRow(10+$max_internal_files,1,'External File Names');         }                    }                            }else{           	   foreach ($evidences as $key => $value) {                                      $evidences[$key] = array();                   $file_int=  explode("#T@t@#", $value['file_int']);		   $file_ext=  explode("#T@t@#", $value['file_ext']);                   $file1_cnt=count($file_int);                   $file2_cnt=count($file_ext);                   $final_files_cnt=$file1_cnt+$file2_cnt;                                      if($assessment_type==2 || $assessment_type==4){                   $round=!empty($value['student_round'])?$value['student_round']:'';                       }else{                   $round=!empty($value['aqs_round'])?$value['aqs_round']:'';                   }                   //echo '<pre>';                    //echo $final_files_cnt;                    //die;                    //echo '<pre>';		   $file_internal=  explode("#T@t@#", $value['file_int']);		   $file_external=  explode("#T@t@#", $value['file_ext']);                   $file_names=array_merge($file_internal, $file_external);                                      $file_total=count($file_names);                $srcfile = ROOT."uploads".DS;			 		$client_name = $value['client_name'];                                if($assessment_type==2 || $assessment_type==4){                $teacher_student_name=$value['name'];                }else{                $teacher_student_name="";                   }                $kpa = "KPA" . $value['kpa_order'];                $kq = "_KQ" . $value['kq_order'];                $cq = "_CQ" . $value['cq_order'];                $js = "_JS" . $value['js_order'];                $dstfile_path = $kpa . $kq . $cq . $js;                //$dstfile1 = $tmpPath."$client_name".DS."$dstfile_path".DS;                                if($teacher_student_name!=""){                $tname="$teacher_student_name".DS."";                }else{                $tname="";                   }                $dstfile1 = $tmpPath."$client_name".DS."".$tname."$dstfile_path".DS;                //                echo count($file_names);                                /*for($j=0;$j<$file_total;$j++){                                            //echo $file_names[$j][$k]."<br>";                     if(!file_exists($dstfile1) && file_exists($srcfile.$file_names[$j]) && !empty($file_names[$j]) ){                           mkdir($dstfile1,0777,true);                     }                                          if(file_exists($srcfile.$file_names[$j]) && !empty($file_names[$j]) ){                                                 //$special_symbols = array("#","[","]","/","\\");                        $final_file = str_replace($special_symbols, "", $file_names[$j]);                                                @copy($srcfile.$file_names[$j], $dstfile1.$final_file);                        $zip->addFile($dstfile1.$file_names[$j],"$client_name".DS."".$tname."$dstfile_path".DS."$final_file");  // Adding files into zip                        //echo $srcfile.$file_names[$j];                     }                        }*/                                       // die;                           $rId++;            if($assessment_type==2 || $assessment_type==4){             $col1=11;              $workSheetArr->setCellValue("A$rId",$value['network_name'])                         ->setCellValue("B$rId",$value['province_name'])                         ->setCellValue("C$rId",$client_name)                         ->setCellValue("D$rId",$value['name'])                         ->setCellValue("E$rId",$round)                         ->setCellValue("F$rId",$value['kpa_name'])                         ->setCellValue("G$rId",$value['key_question_text'])                         ->setCellValue("H$rId",$value['core_question_text'])                         ->setCellValue("I$rId",$value['judgement_statement_text'])                         ->setCellValue("J$rId",$value['internal_evidence'])                         ->setCellValue("K$rId",$value['external_evidence']);            }else{                $col1=10;            $workSheetArr->setCellValue("A$rId",$value['network_name'])                         ->setCellValue("B$rId",$value['province_name'])                         ->setCellValue("C$rId",$client_name)                         ->setCellValue("D$rId",$round)                         ->setCellValue("E$rId",$value['kpa_name'])                         ->setCellValue("F$rId",$value['key_question_text'])                         ->setCellValue("G$rId",$value['core_question_text'])                         ->setCellValue("H$rId",$value['judgement_statement_text'])                         ->setCellValue("I$rId",$value['internal_evidence'])                         ->setCellValue("J$rId",$value['external_evidence']);            }			$max_internal_files =$max_internal_files>$file1_cnt?$max_internal_files:$file1_cnt;                        $col2=$max_internal_files+$col1;                    			if($file1_cnt>0){                      for($kl=0;$kl<$file1_cnt;$kl++)                     {                          			/*$objPHPExcel->getActiveSheet()->setCellValueByColumnAndRow($col1,$rId,$file_internal[$kl]);                        //echo "".$dstfile1."".$file_internal[$kl]."";                        if(file_exists("".$dstfile1."".$file_internal[$kl]."") ){                         $file_internal[$kl]!=''?$objPHPExcel->getActiveSheet()->getCellByColumnAndRow($col1,$rId)->getHyperlink()->setUrl("".$tname."$dstfile_path".DS.$file_internal[$kl]):'';                        }*/                                                  //$special_symbols = array("#","[","]","/","\\");                        $final_file_internal = str_replace($special_symbols, "", $file_internal[$kl]);                                                   $workSheetArr->setCellValueByColumnAndRow($col1,$rId,$final_file_internal);                        //echo "".$dstfile1."".$file_internal[$kl]."";                                                if(detailsFile("uploads/".$final_file_internal."") ){                            $file_internal[$kl]!=''?$workSheetArr->getCellByColumnAndRow($col1,$rId)->getHyperlink()->setUrl("".UPLOAD_URL.$final_file_internal):'';                        }                                                //$objPHPExcel->getActiveSheet()->setCellValueByColumnAndRow($max_internal_files,$rId,$file_external[$kl]);                        //$objPHPExcel->getActiveSheet()->getCellByColumnAndRow($max_internal_files,$rId)->getHyperlink()->setUrl("$dstfile_path".DS.$file_external[$kl]);                           $col1++;                        //$max_internal_files++;                        //$col2++;                                          }                        }                        if($file2_cnt>0){                                          //$col2++;                      for($l=0;$l<$file2_cnt;$l++)                     {			/*$objPHPExcel->getActiveSheet()->setCellValueByColumnAndRow($col2,$rId,$file_external[$l]);                                                if(file_exists("".$dstfile1."".$file_external[$l]."") ){                        $file_external[$l]!=''?$objPHPExcel->getActiveSheet()->getCellByColumnAndRow($col2,$rId)->getHyperlink()->setUrl("".$tname."$dstfile_path".DS.$file_external[$l]):'';                        }*/                                                  //$special_symbols = array("#","[","]","/","\\");                        $final_file_external = str_replace($special_symbols, "", $file_external[$l]);                          $workSheetArr->setCellValueByColumnAndRow($col2,$rId,$final_file_external);                                                if(detailsFile("uploads/".$final_file_external."") ){                        $file_external[$l]!=''?$workSheetArr->getCellByColumnAndRow($col2,$rId)->getHyperlink()->setUrl("".UPLOAD_URL.$final_file_external):'';                        }                                                $col2++;                     }                     			}                                               }                         if($assessment_type==2 || $assessment_type==4){         $workSheetArr->setCellValueByColumnAndRow(11+$max_internal_files,1,'External File Names');             }else{         $workSheetArr->setCellValueByColumnAndRow(10+$max_internal_files,1,'External File Names');         }             }          $i++;        $objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel2007');        if(!file_exists($tmpPath."$client_name"))        mkdir($tmpPath."$client_name",0777,true);        $objWriter->save(str_replace(__FILE__,$tmpPath."$client_name".DS.$client_name.'.xlsx',__FILE__));			        $zip->addFile( $tmpPath."$client_name".DS.$client_name.'.xlsx',"$client_name".DS.$client_name.'.xlsx'); // Adding files into zip		        //unlink($tmpPath."$client_name".DS.$client_name.'.xlsx');				          }         $zip->close();            header('Content-type: application/zip');          header('Content-Disposition: attachment; filename="Evidence_Report.zip"');          readfile("tmp/tmp_evidence/Evidence_Report.zip");            //unlink($tmpPath."$client_name".DS.$client_name.'.xlsx');	 unlink(ROOT."tmp/tmp_evidence/Evidence_Report.zip");	            //unlink($tmpPath);           $this->_render = false;            }      function downloadXYZAction(){        ini_set('max_execution_time', 0);        ini_set("memory_limit", "200000M");        $exportExcelModel =new exportExcelModel();        $data_show=$exportExcelModel->getExcelData();        $i=0;        require_once(ROOT."library/PHPExcel/Classes/PHPExcel.php");                $objPHPExcel = new PHPExcel();                header('Content-Type: application/vnd.ms-excel');                header('Content-Disposition: attachment;filename="School Review Evidences.xlsx"');                header('Cache-Control: max-age=0');                $objPHPExcel->getProperties()                        ->setCreator("PHPOffice")                        ->setLastModifiedBy("PHPOffice")                        ->setTitle("PHPExcel Test Document")                        ->setSubject("PHPExcel Test Document")                        ->setDescription("Test document for PHPExcel, generated using PHP classes.")                        ->setKeywords("Office PHPExcel php")                        ->setCategory("Test result file");                                                                                                                        foreach($data_show as $key=>$val){            $school=$val['client_name'];                        //$newSheet = $objPHPExcel->createSheet();            if($i>0){            $newSheet = $objPHPExcel->createSheet();            $objPHPExcel->setActiveSheetIndex($i);            $newSheet->setTitle("Batch ".$school."");            }else{            $objPHPExcel->setActiveSheetIndex($i);                        $objPHPExcel->getActiveSheet()->setTitle("Batch ".$school."");            }                        //$objPHPExcel->getSheetByName("Batch".$school."")->setSheetState(PHPExcel_Worksheet::SHEETSTATE_VERYHIDDEN);                            $val['gids'];            $ids=explode(",",$val['gids']);                        $row=2;                            $objPHPExcel->setActiveSheetIndex($i)->SetCellValue("A".$row."", "Name");                $objPHPExcel->setActiveSheetIndex($i)->SetCellValue("B".$row."", "ID");                $objPHPExcel->setActiveSheetIndex($i)->SetCellValue("C".$row."", "Round");                $objPHPExcel->setActiveSheetIndex($i)->SetCellValue("D".$row."", "1a");                $objPHPExcel->setActiveSheetIndex($i)->SetCellValue("E".$row."", "1b");                $objPHPExcel->setActiveSheetIndex($i)->SetCellValue("F".$row."", "1c");                $objPHPExcel->setActiveSheetIndex($i)->SetCellValue("G".$row."", "2a");                $objPHPExcel->setActiveSheetIndex($i)->SetCellValue("H".$row."", "2b");                $objPHPExcel->setActiveSheetIndex($i)->SetCellValue("I".$row."", "2c");                $objPHPExcel->setActiveSheetIndex($i)->SetCellValue("J".$row."", "3a");                $objPHPExcel->setActiveSheetIndex($i)->SetCellValue("K".$row."", "3b");                $objPHPExcel->setActiveSheetIndex($i)->SetCellValue("L".$row."", "3c");                                                $objPHPExcel->setActiveSheetIndex($i)->SetCellValue("M".$row."", "4a");                $objPHPExcel->setActiveSheetIndex($i)->SetCellValue("N".$row."", "4b");                $objPHPExcel->setActiveSheetIndex($i)->SetCellValue("O".$row."", "4c");                $objPHPExcel->setActiveSheetIndex($i)->SetCellValue("P".$row."", "5a");                $objPHPExcel->setActiveSheetIndex($i)->SetCellValue("Q".$row."", "5b");                $objPHPExcel->setActiveSheetIndex($i)->SetCellValue("R".$row."", "5c");                $objPHPExcel->setActiveSheetIndex($i)->SetCellValue("S".$row."", "6a");                $objPHPExcel->setActiveSheetIndex($i)->SetCellValue("T".$row."", "6b");                $objPHPExcel->setActiveSheetIndex($i)->SetCellValue("U".$row."", "6c");                                                 $objPHPExcel->setActiveSheetIndex($i)->SetCellValue("V".$row."", "7a");                $objPHPExcel->setActiveSheetIndex($i)->SetCellValue("W".$row."", "7b");                $objPHPExcel->setActiveSheetIndex($i)->SetCellValue("X".$row."", "7c");                $objPHPExcel->setActiveSheetIndex($i)->SetCellValue("Y".$row."", "8a");                $objPHPExcel->setActiveSheetIndex($i)->SetCellValue("Z".$row."", "8b");                $objPHPExcel->setActiveSheetIndex($i)->SetCellValue("AA".$row."", "8c");                $objPHPExcel->setActiveSheetIndex($i)->SetCellValue("AB".$row."", "9a");                $objPHPExcel->setActiveSheetIndex($i)->SetCellValue("AC".$row."", "9b");                $objPHPExcel->setActiveSheetIndex($i)->SetCellValue("AD".$row."", "9c");                                $row++;            //echo"<pre>";            //print_r($ids);            //echo"</pre>";                        $reportObject=new groupReport(4,4,4,'','');            $assessments_ids=$reportObject->getAllAssessment($ids[0]);            //print_r($assessments_ids);            //die();            foreach($assessments_ids as $key=>$val){                    $assessment_id=$val['assessment_id'];                    $name=$val['name'];                    $student_uid=$val['student_uid'];                    //$data_evi=$reportObject->loadJudgementEvidence($assessment_id);                    $data_evi=$reportObject->loadJudgementEvidenceAllRounds($assessment_id);                    //echo"<pre>";                    //print_r($data_evi);                    //echo"</pre>";                    //die();                $objPHPExcel->setActiveSheetIndex($i)->SetCellValue("A".$row."", $name);                $objPHPExcel->setActiveSheetIndex($i)->SetCellValue("B".$row."", $student_uid);                $objPHPExcel->setActiveSheetIndex($i)->SetCellValue("C".$row."", 1);                foreach($data_evi as $key1=>$val1){                    //print_r($val1);                    $val1['srno']=trim($val1['srno']);                    $val1['evidence_text']=$val1['evidence_text']=="NIL"?"":$val1['evidence_text'];                if($val1['srno']=="1a"){                //echo"dadad";                    $objPHPExcel->setActiveSheetIndex($i)->SetCellValue("D".$row."", "".$val1['evidence_text']."");                }                if($val1['srno']=="1b"){                $objPHPExcel->setActiveSheetIndex($i)->SetCellValue("E".$row."", $val1['evidence_text']);                }                if($val1['srno']=="1c"){                $objPHPExcel->setActiveSheetIndex($i)->SetCellValue("F".$row."", $val1['evidence_text']);                }                if($val1['srno']=="2a"){                $objPHPExcel->setActiveSheetIndex($i)->SetCellValue("G".$row."", $val1['evidence_text']);                }                if($val1['srno']=="2b"){                $objPHPExcel->setActiveSheetIndex($i)->SetCellValue("H".$row."", $val1['evidence_text']);                }                if($val1['srno']=="2c"){                $objPHPExcel->setActiveSheetIndex($i)->SetCellValue("I".$row."", $val1['evidence_text']);                }                if($val1['srno']=="3a"){                $objPHPExcel->setActiveSheetIndex($i)->SetCellValue("J".$row."", $val1['evidence_text']);                }                if($val1['srno']=="3b"){                $objPHPExcel->setActiveSheetIndex($i)->SetCellValue("K".$row."", $val1['evidence_text']);                }                if($val1['srno']=="3c"){                $objPHPExcel->setActiveSheetIndex($i)->SetCellValue("L".$row."", $val1['evidence_text']);                }                                                if($val1['srno']=="4a"){                    $objPHPExcel->setActiveSheetIndex($i)->SetCellValue("M".$row."", $val1['evidence_text']);                }                if($val1['srno']=="4b"){                $objPHPExcel->setActiveSheetIndex($i)->SetCellValue("N".$row."", $val1['evidence_text']);                }                if($val1['srno']=="4c"){                $objPHPExcel->setActiveSheetIndex($i)->SetCellValue("O".$row."", $val1['evidence_text']);                }                if($val1['srno']=="5a"){                $objPHPExcel->setActiveSheetIndex($i)->SetCellValue("P".$row."", $val1['evidence_text']);                }                if($val1['srno']=="5b"){                $objPHPExcel->setActiveSheetIndex($i)->SetCellValue("Q".$row."", $val1['evidence_text']);                }                if($val1['srno']=="5c"){                $objPHPExcel->setActiveSheetIndex($i)->SetCellValue("R".$row."", $val1['evidence_text']);                }                if($val1['srno']=="6a"){                $objPHPExcel->setActiveSheetIndex($i)->SetCellValue("S".$row."", $val1['evidence_text']);                }                if($val1['srno']=="6b"){                $objPHPExcel->setActiveSheetIndex($i)->SetCellValue("T".$row."", $val1['evidence_text']);                }                if($val1['srno']=="6c"){                $objPHPExcel->setActiveSheetIndex($i)->SetCellValue("U".$row."", $val1['evidence_text']);                }                                                if($val1['srno']=="7a"){                    $objPHPExcel->setActiveSheetIndex($i)->SetCellValue("V".$row."", $val1['evidence_text']);                }                if($val1['srno']=="7b"){                $objPHPExcel->setActiveSheetIndex($i)->SetCellValue("W".$row."", $val1['evidence_text']);                }                if($val1['srno']=="7c"){                $objPHPExcel->setActiveSheetIndex($i)->SetCellValue("X".$row."", $val1['evidence_text']);                }                if($val1['srno']=="8a"){                $objPHPExcel->setActiveSheetIndex($i)->SetCellValue("Y".$row."", $val1['evidence_text']);                }                if($val1['srno']=="8b"){                $objPHPExcel->setActiveSheetIndex($i)->SetCellValue("Z".$row."", $val1['evidence_text']);                }                if($val1['srno']=="8c"){                $objPHPExcel->setActiveSheetIndex($i)->SetCellValue("AA".$row."", $val1['evidence_text']);                }                if($val1['srno']=="9a"){                $objPHPExcel->setActiveSheetIndex($i)->SetCellValue("AB".$row."", $val1['evidence_text']);                }                if($val1['srno']=="9b"){                $objPHPExcel->setActiveSheetIndex($i)->SetCellValue("AC".$row."", $val1['evidence_text']);                }                if($val1['srno']=="9c"){                $objPHPExcel->setActiveSheetIndex($i)->SetCellValue("AD".$row."", $val1['evidence_text']);                }                                }                     $row++;                     //die();                    if(isset($ids[1]) && $ids[1]>0){                        $round2_assessment=$exportExcelModel->round2Id($ids[1],$assessment_id);                                                               $objPHPExcel->setActiveSheetIndex($i)->SetCellValue("C".$row."", 2);                                                if(isset($round2_assessment['assessment_id']) && $round2_assessment['assessment_id']>0){                        $round2_assessment_id=$round2_assessment['assessment_id'];                        //$data_evi=$reportObject->loadJudgementEvidence($assessment_id);                                                $evidences=$reportObject->loadJudgementEvidenceAllRounds($round2_assessment_id);                                                foreach($evidences as $key2=>$val2){                            $val2['srno']=trim($val2['srno']);                            $val2['evidence_text']=$val2['evidence_text']=="NIL"?"":$val2['evidence_text'];                if($val2['srno']=="1a"){                    $objPHPExcel->setActiveSheetIndex($i)->SetCellValue("D".$row."", $val2['evidence_text']);                }                if($val2['srno']=="1b"){                $objPHPExcel->setActiveSheetIndex($i)->SetCellValue("E".$row."", $val2['evidence_text']);                }                if($val2['srno']=="1c"){                $objPHPExcel->setActiveSheetIndex($i)->SetCellValue("F".$row."", $val2['evidence_text']);                }                if($val2['srno']=="2a"){                $objPHPExcel->setActiveSheetIndex($i)->SetCellValue("G".$row."", $val2['evidence_text']);                }                if($val2['srno']=="2b"){                $objPHPExcel->setActiveSheetIndex($i)->SetCellValue("H".$row."", $val2['evidence_text']);                }                if($val2['srno']=="2c"){                $objPHPExcel->setActiveSheetIndex($i)->SetCellValue("I".$row."", $val2['evidence_text']);                }                if($val2['srno']=="3a"){                $objPHPExcel->setActiveSheetIndex($i)->SetCellValue("J".$row."", $val2['evidence_text']);                }                if($val2['srno']=="3b"){                $objPHPExcel->setActiveSheetIndex($i)->SetCellValue("K".$row."", $val2['evidence_text']);                }                if($val2['srno']=="3c"){                $objPHPExcel->setActiveSheetIndex($i)->SetCellValue("L".$row."", $val2['evidence_text']);                }                                                if($val2['srno']=="4a"){                    $objPHPExcel->setActiveSheetIndex($i)->SetCellValue("M".$row."", $val2['evidence_text']);                }                if($val2['srno']=="4b"){                $objPHPExcel->setActiveSheetIndex($i)->SetCellValue("N".$row."", $val2['evidence_text']);                }                if($val2['srno']=="4c"){                $objPHPExcel->setActiveSheetIndex($i)->SetCellValue("O".$row."", $val2['evidence_text']);                }                if($val2['srno']=="5a"){                $objPHPExcel->setActiveSheetIndex($i)->SetCellValue("P".$row."", $val2['evidence_text']);                }                if($val2['srno']=="5b"){                $objPHPExcel->setActiveSheetIndex($i)->SetCellValue("Q".$row."", $val2['evidence_text']);                }                if($val2['srno']=="5c"){                $objPHPExcel->setActiveSheetIndex($i)->SetCellValue("R".$row."", $val2['evidence_text']);                }                if($val2['srno']=="6a"){                $objPHPExcel->setActiveSheetIndex($i)->SetCellValue("S".$row."", $val2['evidence_text']);                }                if($val2['srno']=="6b"){                $objPHPExcel->setActiveSheetIndex($i)->SetCellValue("T".$row."", $val2['evidence_text']);                }                if($val2['srno']=="6c"){                $objPHPExcel->setActiveSheetIndex($i)->SetCellValue("U".$row."", $val2['evidence_text']);                }                                                if($val2['srno']=="7a"){                    $objPHPExcel->setActiveSheetIndex($i)->SetCellValue("V".$row."", $val2['evidence_text']);                }                if($val2['srno']=="7b"){                $objPHPExcel->setActiveSheetIndex($i)->SetCellValue("W".$row."", $val2['evidence_text']);                }                if($val2['srno']=="7c"){                $objPHPExcel->setActiveSheetIndex($i)->SetCellValue("X".$row."", $val2['evidence_text']);                }                if($val2['srno']=="8a"){                $objPHPExcel->setActiveSheetIndex($i)->SetCellValue("Y".$row."", $val2['evidence_text']);                }                if($val2['srno']=="8b"){                $objPHPExcel->setActiveSheetIndex($i)->SetCellValue("Z".$row."", $val2['evidence_text']);                }                if($val2['srno']=="8c"){                $objPHPExcel->setActiveSheetIndex($i)->SetCellValue("AA".$row."", $val2['evidence_text']);                }                if($val2['srno']=="9a"){                $objPHPExcel->setActiveSheetIndex($i)->SetCellValue("AB".$row."", $val2['evidence_text']);                }                if($val2['srno']=="9b"){                $objPHPExcel->setActiveSheetIndex($i)->SetCellValue("AC".$row."", $val2['evidence_text']);                }                if($val2['srno']=="9c"){                $objPHPExcel->setActiveSheetIndex($i)->SetCellValue("AD".$row."", $val2['evidence_text']);                }                                }                                                $row++;                        }                                            }                                         $row++;                                        //print_r($evidences);                                }            $i++;            /*if($i>0){               // die();               $objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel2007');              //$objWriter->save('tmp/temp_upload/'.$school.'_round'.$round.'.xlsx');              $objWriter->save('php://output');             $this->_render = false;              die();            }*/                                }                 $objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, 'Excel2007');              //$objWriter->save('tmp/temp_upload/'.$school.'_round'.$round.'.xlsx');              $objWriter->save('php://output');        $this->_render = false;            }               }